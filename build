#!/usr/bin/env bash

set -eufo pipefail

container_image=localhost/builder
container_engine=podman
target_dir=.build

container_run_opts=(
	--security-opt seccomp=unconfined
	--security-opt apparmor=unconfined
	--security-opt label=disable
	--read-only
)

use_kms=0
resolve_cname=0

while [ $# -gt 0 ]; do
	case "$1" in
		--container-image)
			container_image="$2"
			shift 2
			;;
		--container-engine)
			container_engine="$2"
			shift 2
			;;
		--container-run-opts)
			declare -a "container_run_opts=($2)"
			shift 2
			;;
		--kms)
			use_kms=1
			shift
			;;
		--print-container-image)
			printf '%s\n' "$container_image"
			exit 0
			;;
		--resolve-cname)
			resolve_cname=1
			shift
			;;
                --target)
                        target_dir="$2"
                        shift 2
                        ;;
		*)
			break
			;;
	esac
done

container_mount_opts=(
        -v "$PWD/features:/builder/features:ro"
        -v "$PWD/keyring.gpg:/builder/keyring.gpg:ro"
        -v "$PWD/$target_dir:/builder/.build"
)

if [ "$container_image" = localhost/builder ]; then
	dir="$(dirname -- "$(realpath -- "${BASH_SOURCE[0]}")")"
	"$container_engine" build -t "$container_image" "$dir"
fi

repo=""
commit=""
timestamp=""
default_version=""
[ -e get_repo ] && repo="$(./get_repo)"
[ -e get_commit ] && commit="$(./get_commit)"
[ -e get_timestamp ] && timestamp="$(./get_timestamp)"
[ -e get_version ] && default_version="$(./get_version)"

[ -d $target_dir ] || mkdir $target_dir

if [ "$resolve_cname" = 1 ]; then
	arch="$("$container_engine" run --rm "${container_run_opts[@]}" "${container_mount_opts[@]}" "$container_image" dpkg --print-architecture)"
	cname="$("$container_engine" run --rm "${container_run_opts[@]}" "${container_mount_opts[@]}" "$container_image" /builder/parse_features --feature-dir /builder/features --default-arch "$arch" --default-version "$default_version" --cname "$1")"
	short_commit="$(head -c 8 <<< "$commit")"
	echo "$cname-$short_commit"
	exit 0
fi

make_opts=(
	REPO="$repo"
	COMMIT="$commit"
	TIMESTAMP="$timestamp"
	DEFAULT_VERSION="$default_version"
)

if [ "$use_kms" = 1 ]; then
	for e in AWS_DEFAULT_REGION AWS_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN; do
		if [ -n "${!e-}" ]; then
			make_opts+=("$e=${!e}")
		fi
	done
fi

if [ -d cert ]; then
	container_mount_opts+=(-v "$PWD/cert:/builder/cert:ro")
fi

"$container_engine" run --rm "${container_run_opts[@]}" "${container_mount_opts[@]}" "$container_image" make --no-print-directory -C /builder "${make_opts[@]}" "$@"
