#!/usr/bin/env bash

set -Eeufo pipefail

# redirect all output to stderr so only second pass output for makedisk gets written to stdout
exec 3>&1
exec 1>&2

rootfs="$1"

rootfs_work=$(mktemp -d)
mount -t tmpfs -o size="$TEMPFS_SIZE" tmpfs "$rootfs_work"
cp -a "$rootfs/." "$rootfs_work"

fstab="$(mktemp)"

partitions="$(mktemp)"
final_partition="$(mktemp)"
efi_partition="$(mktemp)"

part_num=0

# strip comments and empty lines and sort by path depth (deepest first)
sed 's/#.*//;/^[[:space:]]*$/d' \
| while IFS= read -r line; do
	# get fstab entry target path depth
	depth=$(echo "$line" | awk '{ print $2 }' | sed 's#^/\+##;s#/\+$##' | awk -F '/' '{ print NF }')
	echo "$depth" "$line"
  done \
| sort -k 1 -n -r \
| while read -r depth source target fs options args; do
	part_num=$((part_num + 1))
	# parse extra fstab arguments to determine partition attributes
	type=$([[ "$fs" = "swap" ]] && echo "swap" || echo "linux")
	# consider switching this to args
	[[ "$target" = "/" && "$BUILDER_ARCH" = "amd64" ]] && type="4f68bce3-e8cd-4db1-96e7-fbcaf984b709"
	[[ "$target" = "/" && "$BUILDER_ARCH" = "arm64" ]] && type="b921b045-1df0-41c3-af44-4c6f280d3fae"
	size=
	resize=1
	syslinux=$([[ "$(cut -c -5 <<< "$target")" = "/boot" ]] || [[ "$(tr -d '[:blank:]' <<< "$target")" = "/efi" ]] && [[ -f "$rootfs/usr/bin/syslinux" ]] && echo 1 || echo 0)
	is_final_partition=0
	while IFS="=" read -r key value; do
		case "$key" in
			"type")
				type="$value"
				;;
			"size")
				size="$value"
				resize=0
				;;
			"syslinux")
				syslinux=1
				;;
			"final_partition")
				is_final_partition=1
				;;
			*)
				if [ -n "$key" ]; then
					echo "unsupported or deprecated arg $key" >&2
					exit 1
				fi
		esac
	done < <(echo "$args" | tr "," "\n")

	# check if fstab entry specifies source by UUID or LABEL
	uuid="$(grep -oP '(?<=^UUID=)[a-fA-F0-9\-]*$' <<< "$source" || true)"
	label="$(grep -oP '(?<=^LABEL=)[[:graph:]]*$' <<< "$source" || true)"

	if [[ "$depth" = 0 ]]; then
		# we iterate depth sorted, so all other partitions should already have been processed and written to fstab
		options="$options,x-systemd.growfs"
		echo "$source" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
		
		column -t "$fstab" | tac > "$rootfs_work/etc/fstab"
	fi

	data_source="$rootfs_work$target"

	# compute sufficiently padded size for partition (aligned to nearest MB (2048 sectors))
	size=${size:-$(du -sb "$data_source" | awk '{ min_size_bytes = min_size * MB; size = $1 * 1.5; padded_size = size + (MB - (size % MB) % MB); if (padded_size < min_size_bytes) padded_size = min_size_bytes; print (padded_size / MB) "MiB" }' "MB=1048576" "min_size=64")}

	file="$(mktemp)"
	truncate -s "$size" "$file"

	case "$fs" in
		"ext4")
			# mke2fs sets the ext4 superblock s_flags field to EXT2_FLAGS_SIGNED_HASH or EXT2_FLAGS_UNSIGNED_HASH depending on architecture, so we need to use target architecture e2fsprogs, not native ones
			[ ! -e "$rootfs/builder" ]
			mkdir "$rootfs/builder"
			mount --rbind --make-rprivate /builder "$rootfs/builder"
			mount -t tmpfs -o size="$TEMPFS_SIZE" none "$rootfs/tmp"
			[[ "$data_source" == /tmp* ]]
			[ "$(dirname "$file")" = /tmp ]
			mkdir -p "$rootfs$data_source"
			mount --bind "$data_source" "$rootfs$data_source"
			touch "$rootfs$file"
			mount --bind "$file" "$rootfs$file"
			mount --rbind --make-rprivate /proc "$rootfs/proc"
			#shellcheck disable=SC2046
			chroot "$rootfs" make_reproducible_ext4 -t "$BUILDER_TIMESTAMP" -h "gardenlinux:$BUILDER_VERSION:partition:$target" ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} -q $([ "$resize" = 0 ] || echo "-m") $(grep -v x-systemd.growfs <<< "$options" &> /dev/null || echo "-j") -p 16 "$data_source" "$file"
			umount -l "$rootfs/proc"
			umount -R "$rootfs/tmp"
			umount -l "$rootfs/builder"
			rmdir "$rootfs/builder"
			;;
		"vfat")
			make_reproducible_vfat -t "$BUILDER_TIMESTAMP" -h "gardenlinux:$BUILDER_VERSION:partition:$target" ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} "$data_source" "$file"
			echo "$file" > "$efi_partition"
			;;
		"swap")
			make_reproducible_swap ${uuid:+"-u"} ${uuid:+"$uuid"} ${label:+"-l"} ${label:+"$label"} "$file"
			;;
		*)
			echo "filesystem type $fs not yet supported"
			exit 1
			;;
	esac

	# for real mount points (i.e. not swap) clear target directory after contents written to partition to avoid rewriting contents to parent mount point partition
	if [[ "$(cut -c 1 <<< "$target")" = "/" ]]; then
		find "$data_source" -depth -mindepth 1 -delete
	fi

	# install syslinux if extra argument given in fstab
	if [[ "$syslinux" = 1 ]]; then
		# syslinux uses mtools internally, so datefudge LD_PRELOAD applying to mtools native binaries, but not to syslinux binary should be sufficient for reproducible builds
		datefudge -s "@$BUILDER_TIMESTAMP" "$rootfs/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2" --library-path "$rootfs/usr/lib/x86_64-linux-gnu" "$rootfs/usr/bin/syslinux" -d syslinux -i "$file"
	fi

	# recalc size, since it might have change (e.g. from resize2fs)
	size=$(du -b "$file" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' "MB=1048576")

	echo "$target $(sha256sum "$file")"

	# set dump and pass options for output fstab to defaults
	dump=0
	pass=$( ([[ "$(cut -c 1 <<< "$target")" != "/" ]] && echo 0) || ([[ "$target" = "/" ]] && echo 1) || echo 2)

	
	part_uuid=$(echo "gardenlinux:$BUILDER_VERSION:part_uuid:$source" | uuid_hash)
	if [ "$is_final_partition" = 1 ]; then
		[ ! -s "$final_partition" ]
		echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >> "$final_partition"
	else
		echo -e "$part_uuid\t$type\t$size\t$syslinux\t$file\t$label" >> "$partitions"
	fi
	
	echo "$source" "$target" "$fs" "$options" "$dump" "$pass" >> "$fstab"
  done

umount "$rootfs_work"
rmdir "$rootfs_work"

read -r _ cmdline < "$rootfs/etc/kernel/cmdline" # hacky assumption that root= is always at start of kernel cmdline. TODO: find better way to handle this
root_source=$(tail -n 1 "$fstab" | cut -d " " -f 1)
cmdline="root=$root_source $cmdline"

cat "$partitions" "$final_partition" >&3

# cleanup
rm "$fstab" "$partitions" "$final_partition"
